import streamlit as st
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import time
import tempfile
from pathlib import Path
from matplotlib.patches import Rectangle, Arrow, FancyArrowPatch
import matplotlib.patheffects as path_effects
from matplotlib.colors import LinearSegmentedColormap
from dados_anestesicos import anestesicos, esquema_distribuicao, calcular_base_livre

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Simulador de Anest√©sicos Locais",
    page_icon="üíâ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo e introdu√ß√£o
st.title("Simulador do Mecanismo de A√ß√£o de Anest√©sicos Locais")
st.markdown("""
Este simulador interativo demonstra como os anest√©sicos locais exercem seu efeito bloqueador
nos canais de s√≥dio, com base nas propriedades f√≠sico-qu√≠micas de cada agente.

A efic√°cia de um anest√©sico local depende de v√°rios fatores, incluindo seu pKa, que determina
a propor√ß√£o entre as formas ionizada (RNH‚Å∫) e n√£o-ionizada (RN) em determinado pH.
Apenas a forma n√£o-ionizada (RN) consegue atravessar a membrana lip√≠dica da bainha do nervo.
""")

# Sidebar para sele√ß√£o do anest√©sico
st.sidebar.header("Selecione o Anest√©sico Local")
anestesico_selecionado = st.sidebar.selectbox(
    "Escolha um anest√©sico:",
    list(anestesicos.keys())
)

# Exibir propriedades do anest√©sico selecionado
st.sidebar.subheader("Propriedades do Anest√©sico")
st.sidebar.markdown(f"""
- **Tipo:** {anestesicos[anestesico_selecionado]['tipo']}
- **pKa:** {anestesicos[anestesico_selecionado]['pKa']}
- **% Base (RN) em pH 7,4:** {anestesicos[anestesico_selecionado]['base_percent']}%
- **In√≠cio de a√ß√£o:** {anestesicos[anestesico_selecionado]['inicio_acao']} minutos
""")

# Explica√ß√£o da equa√ß√£o de Henderson-Hasselbalch
with st.sidebar.expander("Equa√ß√£o de Henderson-Hasselbalch"):
    st.markdown(r"""
    A porcentagem de base livre (RN) √© calculada usando a equa√ß√£o:
    
    $$\% \text{base livre (RN)} = \frac{1}{1 + 10^{(pKa - pH)}} \times 100$$
    
    Onde:
    - pKa √© a constante de dissocia√ß√£o do anest√©sico
    - pH √© o pH do meio (7,4 para o meio fisiol√≥gico)
    """)

# Calcular a porcentagem real de base livre usando a equa√ß√£o
pKa = anestesicos[anestesico_selecionado]['pKa']
pH = 7.4
base_percent_calculada = calcular_base_livre(pKa, pH)
acid_percent_calculada = 100 - base_percent_calculada

# Comparar com o valor da tabela
base_percent_tabela = anestesicos[anestesico_selecionado]['base_percent']

# Exibir os c√°lculos
st.sidebar.subheader("C√°lculos")
st.sidebar.markdown(f"""
**Usando a equa√ß√£o de Henderson-Hasselbalch:**
- % Base (RN) calculada: {base_percent_calculada:.2f}%
- % √Åcido (RNH‚Å∫) calculada: {acid_percent_calculada:.2f}%

**Valor da tabela:**
- % Base (RN): {base_percent_tabela}%
""")

# Fun√ß√£o para criar a anima√ß√£o
def criar_animacao():
    # Configura√ß√£o da figura
    fig, ax = plt.subplots(figsize=(10, 6))
    plt.close()  # Fechamos a figura para n√£o exibi-la duas vezes
    
    # Cores
    cor_extracelular = '#ffcccc'  # Rosa claro
    cor_intracelular = '#ffffcc'  # Amarelo claro
    cor_membrana = '#cc6666'      # Vermelho escuro
    
    # Desenhar os compartimentos
    ax.add_patch(Rectangle((0, 0.5), 1, 0.5, facecolor=cor_extracelular, edgecolor='black', alpha=0.8))
    ax.add_patch(Rectangle((0, 0), 1, 0.5, facecolor=cor_intracelular, edgecolor='black', alpha=0.8))
    
    # Desenhar a membrana
    ax.add_patch(Rectangle((0, 0.48), 1, 0.04, facecolor=cor_membrana, edgecolor='black', hatch='///', alpha=0.7))
    
    # Textos dos compartimentos
    ax.text(0.5, 0.85, f"Extracelular (pH {pH})", ha='center', fontsize=12, fontweight='bold')
    ax.text(0.5, 0.25, f"Intracelular (pH {pH})", ha='center', fontsize=12, fontweight='bold')
    ax.text(0.5, 0.5, "Bainha do nervo", ha='center', fontsize=10, fontweight='bold', 
            color='white', path_effects=[path_effects.withStroke(linewidth=2, foreground='black')])
    
    # Calcular as quantidades de RN e RNH+ com base no pKa do anest√©sico selecionado
    base_percent = calcular_base_livre(pKa, pH)
    acid_percent = 100 - base_percent
    
    # Normalizar para manter a propor√ß√£o total de 1000 mol√©culas no extracelular
    total_extracelular = 1000
    rn_extra = int(total_extracelular * (base_percent / 100))
    rnh_extra = total_extracelular - rn_extra
    
    # Propor√ß√£o intracelular (aproximadamente 25% do total extracelular)
    proporcao_intra_extra = 0.25
    total_intracelular = int(total_extracelular * proporcao_intra_extra)
    rn_intra = int(total_intracelular * (base_percent / 100))
    rnh_intra = total_intracelular - rn_intra
    
    # Textos das quantidades iniciais
    texto_rnh_extra = ax.text(0.2, 0.75, f"RNH‚Å∫: {rnh_extra}\n({acid_percent:.1f}%)", ha='center', fontsize=10)
    texto_rn_extra = ax.text(0.8, 0.75, f"RN: {rn_extra}\n({base_percent:.1f}%)", ha='center', fontsize=10)
    texto_rnh_intra = ax.text(0.2, 0.15, f"RNH‚Å∫: {rnh_intra}\n({acid_percent:.1f}%)", ha='center', fontsize=10)
    texto_rn_intra = ax.text(0.8, 0.15, f"RN: {rn_intra}\n({base_percent:.1f}%)", ha='center', fontsize=10)
    
    # Criar part√≠culas para anima√ß√£o
    n_particulas = 20  # N√∫mero de part√≠culas para anima√ß√£o
    
    # Propor√ß√£o de part√≠culas RN vs RNH+ baseada no pKa
    n_rn = int(n_particulas * (base_percent / 100))
    n_rnh = n_particulas - n_rn
    
    # Posi√ß√µes iniciais das part√≠culas
    # RNH+ no extracelular (n√£o atravessa a membrana)
    rnh_extra_x = np.random.uniform(0.1, 0.3, n_rnh)
    rnh_extra_y = np.random.uniform(0.6, 0.9, n_rnh)
    
    # RN no extracelular (atravessa a membrana)
    rn_extra_x = np.random.uniform(0.7, 0.9, n_rn)
    rn_extra_y = np.random.uniform(0.6, 0.9, n_rn)
    
    # Part√≠culas no intracelular (inicialmente vazias)
    rn_intra_x = np.array([])
    rn_intra_y = np.array([])
    
    rnh_intra_x = np.array([])
    rnh_intra_y = np.array([])
    
    # Criar os objetos de part√≠culas
    particulas_rnh_extra = ax.scatter(rnh_extra_x, rnh_extra_y, color='red', s=50, alpha=0.7, label='RNH‚Å∫ (Extracelular)')
    particulas_rn_extra = ax.scatter(rn_extra_x, rn_extra_y, color='blue', s=50, alpha=0.7, label='RN (Extracelular)')
    particulas_rn_intra = ax.scatter([], [], color='blue', s=50, alpha=0.7, label='RN (Intracelular)')
    particulas_rnh_intra = ax.scatter([], [], color='red', s=50, alpha=0.7, label='RNH‚Å∫ (Intracelular)')
    
    # Setas para indicar dire√ß√£o do movimento
    seta1 = ax.add_patch(FancyArrowPatch((0.5, 0.7), (0.5, 0.6), 
                                         arrowstyle='->', mutation_scale=15, 
                                         color='black', linewidth=2))
    seta2 = ax.add_patch(FancyArrowPatch((0.5, 0.3), (0.5, 0.4), 
                                         arrowstyle='->', mutation_scale=15, 
                                         color='black', linewidth=2))
    
    # Adicionar canal de s√≥dio no intracelular
    canal_x = 0.4
    canal_y = 0.2
    canal = ax.add_patch(Rectangle((canal_x-0.05, canal_y-0.05), 0.1, 0.1, 
                                  facecolor='gray', edgecolor='black', alpha=0.7))
    texto_canal = ax.text(canal_x, canal_y-0.1, "Canal de Na‚Å∫", ha='center', fontsize=8)
    
    # Configura√ß√µes do gr√°fico
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_aspect('equal')
    ax.axis('off')
    
    # T√≠tulo com o nome do anest√©sico
    titulo = ax.set_title(f"Mecanismo de A√ß√£o: {anestesico_selecionado} (pKa: {pKa})", fontsize=14, fontweight='bold')
    
    # Legenda
    ax.legend(loc='upper right', fontsize=8)
    
    # Vari√°veis para controlar a anima√ß√£o
    rn_atravessando = []  # Lista para armazenar part√≠culas RN que est√£o atravessando a membrana
    
    # Fun√ß√£o de inicializa√ß√£o da anima√ß√£o
    def init():
        particulas_rnh_extra.set_offsets(np.column_stack((rnh_extra_x, rnh_extra_y)))
        particulas_rn_extra.set_offsets(np.column_stack((rn_extra_x, rn_extra_y)))
        particulas_rn_intra.set_offsets(np.empty((0, 2)))
        particulas_rnh_intra.set_offsets(np.empty((0, 2)))
        return (particulas_rnh_extra, particulas_rn_extra, 
                particulas_rn_intra, particulas_rnh_intra)
    
    # Fun√ß√£o de atualiza√ß√£o da anima√ß√£o
    def update(frame):
        nonlocal rn_atravessando, rn_intra_x, rn_intra_y, rnh_intra_x, rnh_intra_y
        
        # Movimento aleat√≥rio das part√≠culas RNH+ no extracelular (n√£o atravessam a membrana)
        rnh_extra_x += np.random.normal(0, 0.01, n_rnh)
        rnh_extra_y += np.random.normal(0, 0.01, n_rnh)
        
        # Manter as part√≠culas dentro dos limites do extracelular
        rnh_extra_x = np.clip(rnh_extra_x, 0.05, 0.35)
        rnh_extra_y = np.clip(rnh_extra_y, 0.55, 0.95)
        
        # Atualizar posi√ß√µes das part√≠culas RNH+ no extracelular
        particulas_rnh_extra.set_offsets(np.column_stack((rnh_extra_x, rnh_extra_y)))
        
        # Movimento das part√≠culas RN no extracelular
        for i in range(len(rn_extra_x)):
            # Se a part√≠cula n√£o est√° atravessando a membrana
            if i not in [r[0] for r in rn_atravessando]:
                # Movimento aleat√≥rio
                rn_extra_x[i] += np.random.normal(0, 0.01)
                rn_extra_y[i] += np.random.normal(0, 0.01)
                
                # Manter dentro dos limites do extracelular
                rn_extra_x[i] = np.clip(rn_extra_x[i], 0.65, 0.95)
                rn_extra_y[i] = np.clip(rn_extra_y[i], 0.55, 0.95)
                
                # Probabilidade de come√ßar a atravessar a membrana
                if np.random.random() < 0.02 and len(rn_atravessando) < 3:
                    rn_atravessando.append((i, 0))  # (√≠ndice, progresso)
        
        # Atualizar part√≠culas RN que est√£o atravessando a membrana
        new_rn_atravessando = []
        for idx, progresso in rn_atravessando:
            progresso += 0.05
            if progresso < 1:
                # Ainda atravessando
                new_rn_atravessando.append((idx, progresso))
                # Atualizar posi√ß√£o (movimento vertical atrav√©s da membrana)
                rn_extra_y[idx] = 0.9 - progresso * 0.5
            else:
                # Terminou de atravessar, mover para o intracelular
                # Probabilidade de convers√£o para RNH+ no intracelular
                if np.random.random() < 0.3:
                    rnh_intra_x = np.append(rnh_intra_x, rn_extra_x[idx])
                    rnh_intra_y = np.append(rnh_intra_y, 0.2)
                else:
                    rn_intra_x = np.append(rn_intra_x, rn_extra_x[idx])
                    rn_intra_y = np.append(rn_intra_y, 0.2)
        
        rn_atravessando = new_rn_atravessando
        
        # Movimento aleat√≥rio das part√≠culas RN no intracelular
        for i in range(len(rn_intra_x)):
            rn_intra_x[i] += np.random.normal(0, 0.01)
            rn_intra_y[i] += np.random.normal(0, 0.01)
            
            # Manter dentro dos limites do intracelular
            rn_intra_x[i] = np.clip(rn_intra_x[i], 0.05, 0.95)
            rn_intra_y[i] = np.clip(rn_intra_y[i], 0.05, 0.45)
        
        # Movimento aleat√≥rio das part√≠culas RNH+ no intracelular
        for i in range(len(rnh_intra_x)):
            rnh_intra_x[i] += np.random.normal(0, 0.01)
            rnh_intra_y[i] += np.random.normal(0, 0.01)
            
            # Manter dentro dos limites do intracelular
            rnh_intra_x[i] = np.clip(rnh_intra_x[i], 0.05, 0.95)
            rnh_intra_y[i] = np.clip(rnh_intra_y[i], 0.05, 0.45)
            
            # Verificar se est√° pr√≥ximo ao canal de s√≥dio
            dist_canal = np.sqrt((rnh_intra_x[i] - canal_x)**2 + (rnh_intra_y[i] - canal_y)**2)
            if dist_canal < 0.1:
                # Atrair para o canal (bloqueio)
                dx = canal_x - rnh_intra_x[i]
                dy = canal_y - rnh_intra_y[i]
                rnh_intra_x[i] += dx * 0.1
                rnh_intra_y[i] += dy * 0.1
        
        # Atualizar os scatters com as novas posi√ß√µes
        particulas_rn_extra.set_offsets(np.column_stack((rn_extra_x, rn_extra_y)))
        
        if len(rn_intra_x) > 0:
            particulas_rn_intra.set_offsets(np.column_stack((rn_intra_x, rn_intra_y)))
        else:
            particulas_rn_intra.set_offsets(np.empty((0, 2)))
            
        if len(rnh_intra_x) > 0:
            particulas_rnh_intra.set_offsets(np.column_stack((rnh_intra_x, rnh_intra_y)))
        else:
            particulas_rnh_intra.set_offsets(np.empty((0, 2)))
        
        return (particulas_rnh_extra, particulas_rn_extra,
                particulas_rn_intra, particulas_rnh_intra)
    
    # Criar a anima√ß√£o
    ani = animation.FuncAnimation(
        fig, update, init_func=init, frames=100, interval=100, blit=True
    )
    
    # Salvar como GIF tempor√°rio
    temp_dir = tempfile.mkdtemp()
    gif_path = Path(temp_dir) / "animacao.gif"
    ani.save(str(gif_path), writer="pillow", fps=10)
    
    return gif_path

# Exibir a anima√ß√£o no Streamlit
st.header("Anima√ß√£o do Mecanismo de A√ß√£o")
with st.spinner("Gerando anima√ß√£o... (isso pode levar alguns segundos)"):
    gif_path = criar_animacao()
    st.image(str(gif_path), caption=f"Mecanismo de a√ß√£o do {anestesico_selecionado}: RN atravessa a membrana e se converte em RNH‚Å∫ no interior da c√©lula")

# Explica√ß√£o do mecanismo de a√ß√£o
st.header("Explica√ß√£o do Mecanismo de A√ß√£o")
st.markdown(f"""
### Como funciona o anest√©sico local {anestesico_selecionado}:

1. **Equil√≠brio √°cido-base no meio extracelular (pH 7,4)**:
   - O anest√©sico existe em duas formas: ionizada (RNH‚Å∫) e n√£o-ionizada (RN)
   - Com pKa de {pKa}, aproximadamente {anestesicos[anestesico_selecionado]['base_percent']}% est√° na forma de base livre (RN)

2. **Travessia da membrana**:
   - Apenas a forma n√£o-ionizada (RN) consegue atravessar a membrana lip√≠dica
   - Quanto maior a propor√ß√£o de RN, mais r√°pida √© a penetra√ß√£o no nervo

3. **Reequil√≠brio no meio intracelular (pH 7,4)**:
   - No interior da c√©lula, o anest√©sico se reequilibra nas formas RN e RNH‚Å∫
   - A forma ionizada (RNH‚Å∫) √© a respons√°vel pelo bloqueio dos canais de s√≥dio

4. **Bloqueio do canal de s√≥dio**:
   - RNH‚Å∫ se liga ao receptor no canal de s√≥dio, bloqueando-o
   - Isso impede a propaga√ß√£o do potencial de a√ß√£o
   - Resulta em bloqueio da condu√ß√£o nervosa e anestesia local
""")

# Rela√ß√£o entre pKa e in√≠cio de a√ß√£o
st.header("Rela√ß√£o entre pKa e In√≠cio de A√ß√£o")
st.markdown(f"""
O **pKa** de um anest√©sico local √© um fator determinante para seu in√≠cio de a√ß√£o:

- **pKa baixo** (como Benzoca√≠na, pKa = 3,5):
  - Maior propor√ß√£o na forma n√£o-ionizada (RN) em pH fisiol√≥gico
  - Atravessa mais rapidamente a membrana
  - In√≠cio de a√ß√£o mais r√°pido

- **pKa alto** (como Proca√≠na, pKa = 9,1):
  - Menor propor√ß√£o na forma n√£o-ionizada (RN) em pH fisiol√≥gico
  - Atravessa mais lentamente a membrana
  - In√≠cio de a√ß√£o mais lento

- **pKa pr√≥ximo ao pH fisiol√≥gico** (como {anestesico_selecionado}, pKa = {pKa}):
  - Equil√≠brio mais balanceado entre as formas RN e RNH‚Å∫
  - In√≠cio de a√ß√£o intermedi√°rio
""")

# Efeito do pH do tecido
st.header("Efeito do pH do Tecido")
st.markdown("""
Em tecidos inflamados ou infectados, o pH local √© mais √°cido (pH < 7,4):

- **Tecido acidificado**:
  - Menor propor√ß√£o de anest√©sico na forma n√£o-ionizada (RN)
  - Menor penetra√ß√£o atrav√©s da membrana
  - Redu√ß√£o da efic√°cia anest√©sica

Isso explica por que anest√©sicos locais s√£o menos eficazes em tecidos inflamados ou infectados.
""")

# Refer√™ncias
st.markdown("""
---
### Refer√™ncias

1. CATTERALL, W. A.; MACKIE, K. Anest√©sicos Locais. In: BRUNTON, L. L. et al. (Ed.). As Bases Farmacol√≥gicas da Terap√™utica de Goodman & Gilman. 13. ed. Porto Alegre: AMGH, 2018.

2. BECKER, D. E.; REED, K. L. Local Anesthetics: Review of Pharmacological Considerations. Anesthesia Progress, v. 59, n. 2, p. 90-102, 2012.

3. MALAMED, S. F. Manual de Anestesia Local. 6. ed. Rio de Janeiro: Elsevier, 2013.
""")

# Rodap√©
st.markdown("""
---
Desenvolvido para fins educacionais | ¬© 2025
""")
